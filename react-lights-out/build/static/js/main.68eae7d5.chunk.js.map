{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","flipCellsAroundMe","isLit","classes","concat","_jsx","className","onClick","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","useState","initialBoard","i","row","j","Math","random","push","createBoard","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","hasWon","children","tableRows","tableCells","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAqBeA,MALf,SAAaC,GAAgC,IAA/B,kBAAEC,EAAiB,MAAEC,GAAOF,EACtC,MAAMG,EAAO,QAAAC,OAAWF,EAAQ,WAAa,IAC7C,OAAOG,cAAA,MAAIC,UAAWH,EAASI,QAASN,GAC5C,E,MC4FeO,MAlFf,SAAcR,GAAyC,IAAxC,MAAES,EAAK,MAAEC,EAAK,oBAAEC,GAAqBX,EAChD,MAAOY,EAAOC,GAAYC,mBAG1B,WACI,IAAIC,EAAe,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOO,IAAK,CAC5B,IAAIC,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAOQ,IAAK,CAC5B,MAAMhB,EAAQiB,KAAKC,SAAWT,EAC9BM,EAAII,KAAKnB,EACb,CACAa,EAAaM,KAAKJ,EACtB,CACA,OAAOF,CACX,CAdmCO,IA8BnC,SAASC,EAAgBC,GACrBX,GAAUY,IACN,MAAOC,EAAGC,GAAKH,EAAMI,MAAM,KAAKC,IAAIC,QAE9BC,EAAWA,CAACL,EAAGC,EAAGK,KAEhBL,GAAK,GAAKA,EAAIjB,GAASgB,GAAK,GAAKA,EAAIjB,IACrCuB,EAAUN,GAAGC,GAAGzB,OAAS8B,EAAUN,GAAGC,GAAGzB,MAC7C,EAIE+B,EAAWR,EAASI,KAAKZ,GAAQ,IAAIA,KAQ3C,OANAc,EAASL,EAAGC,EAAGM,GACfF,EAASL,EAAI,EAAGC,EAAGM,GACnBF,EAASL,EAAI,EAAGC,EAAGM,GACnBF,EAASL,EAAGC,EAAI,EAAGM,GACnBF,EAASL,EAAGC,EAAI,EAAGM,GAEZA,CAAQ,GAEvB,CAKA,GAzCA,WAEI,IAAK,IAAIjB,EAAI,EAAGA,EAAIP,EAAOO,IAAK,CAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAOQ,IACvB,GAAIN,EAAMI,GAAGE,GAAGhB,MAEZ,OAAO,EAIf,OAAO,CACX,CACJ,CA6BIgC,GACA,OAAO7B,cAAA,OAAA8B,SAAK,aAMhB,MAAMC,EAAY,GAClB,IAAK,IAAIV,EAAI,EAAGA,EAAIjB,EAAOiB,IAAK,CAC5B,MAAMW,EAAa,GACnB,IAAK,IAAIV,EAAI,EAAGA,EAAIjB,EAAOiB,IAAK,CAC5B,MAAMH,EAAK,GAAApB,OAAMsB,EAAC,KAAAtB,OAAIuB,GACtBU,EAAWhB,KAAKhB,cAACN,EAAI,CAAaQ,QAASA,IAAMgB,EAAgBC,GAAQtB,MAAOU,EAAMc,GAAGC,GAAGzB,OAAjEsB,GAC/B,CACAY,EAAUf,KAAKhB,cAAA,MAAA8B,SAAsBE,GAAU,OAAAjC,OAAhBsB,IACnC,CAEA,OACIrB,cAAA,SAAA8B,SACI9B,cAAA,SAAA8B,SAAQC,KAGpB,E,MC/FeE,MARf,WACI,OACIjC,cAAA,OAAKC,UAAU,MAAK6B,SAChB9B,cAACG,EAAK,CAACC,MAAO,EAAGC,MAAO,EAAGC,oBAAqB,OAG5D,ECAoB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,cAACiC,EAAG,IAAKQ,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAKC,IACJA,EAAaC,YAAY,IAE1BC,OAAMC,IACLC,QAAQD,MAAMA,EAAME,QAAQ,G","file":"static/js/main.68eae7d5.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n    const classes = `Cell ${isLit ? 'Cell-lit' : ''}`;\n    return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport Cell from './Cell.js';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n    const [board, setBoard] = useState(createBoard());\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n    function createBoard() {\n        let initialBoard = [];\n        for (let i = 0; i < nrows; i++) {\n            let row = [];\n            for (let j = 0; j < ncols; j++) {\n                const isLit = Math.random() < chanceLightStartsOn;\n                row.push(isLit);\n            }\n            initialBoard.push(row);\n        }\n        return initialBoard;\n    }\n\n    function hasWon() {\n        // TODO: check the board in state to determine whether the player has won.\n        for (let i = 0; i < nrows; i++) {\n            for (let j = 0; j < ncols; j++) {\n                if (board[i][j].isLit) {\n                    // If any cell isLit, the player hasn't won yet\n                    return false;\n                }\n            }\n            // If all cells isLit=false, the player has won\n            return true;\n        }\n    }\n\n    function flipCellsAround(coord) {\n        setBoard((oldBoard) => {\n            const [y, x] = coord.split('-').map(Number);\n\n            const flipCell = (y, x, boardCopy) => {\n                // if this coord is actually on board, flip it\n                if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                    boardCopy[y][x].isLit = !boardCopy[y][x].isLit;\n                }\n            };\n\n            // TODO: Make a (deep) copy of the oldBoard\n            const newBoard = oldBoard.map((row) => [...row]);\n            // TODO: in the copy, flip this cell and the cells around it\n            flipCell(y, x, newBoard);\n            flipCell(y + 1, x, newBoard); // Flip below\n            flipCell(y - 1, x, newBoard); // Flip above\n            flipCell(y, x + 1, newBoard); // Flip right\n            flipCell(y, x - 1, newBoard); // Flip left\n            // TODO: return the copy\n            return newBoard;\n        });\n    }\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n    if (hasWon()) {\n        return <div>You Won!</div>;\n    }\n\n    // make table board\n\n    // TODO\n    const tableRows = [];\n    for (let y = 0; y < nrows; y++) {\n        const tableCells = [];\n        for (let x = 0; x < ncols; x++) {\n            const coord = `${y}-${x}`;\n            tableCells.push(<Cell key={coord} onClick={() => flipCellsAround(coord)} isLit={board[y][x].isLit} />);\n        }\n        tableRows.push(<tr key={`row-${y}`}>{tableCells}</tr>);\n    }\n\n    return (\n        <table>\n            <tbody>{tableRows}</tbody>\n        </table>\n    );\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board.js';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Board nrows={6} ncols={6} chanceLightStartsOn={0.25} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}